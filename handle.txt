{
    "id": 101820,
    "activeVersion": 5,
    "score": 2,
    "votableId": 34598400,
    "codingamerId": 6206333,
    "views": 79,
    "commentableId": 34446541,
    "title": "Transposing data",
    "status": "ACCEPTED",
    "type": "CLASHOFCODE",
    "nickname": "PackSciences",
    "publicHandle": "101820b76b348c4c0a17c3c5eeb697c498480c",
    "codingamerHandle": "c448fe147c5dc418c85052ea23e478ba3336026",
    "lastVersion": {
        "version": 5,
        "autocloseTime": 1724922161838,
        "freezeTime": 1722934961838,
        "data": {
            "title": "Transposing data",
            "topics": [],
            "fastest": true,
            "reverse": false,
            "shortest": false,
            "solution": "n\u003dint(input())\nif n\u003d\u003d0:\n    print(\"None\")\n    exit()\nx\u003d0\nL\u003d[]\nfor i in range(n):\n    j\u003dinput().split()\n    m\u003dlen(j)\n    if x!\u003d0 and m!\u003dx:\n        print(\"Invalid\")\n        exit()\n    x\u003dm\n    L.append(j)\nfor j in range(x):\n    Q\u003d[]\n    for i in L:\n        Q.append(i[j])\n    print(\" \".join(Q))",
            "statement": "Given [[n]] the number of lines, and also [[list_strings]] of [[n]] lines of elements separated by a space as input. Your task is to print the transposed matrix, with elements in the same line separated by a space.\nAll lines must contain the same number of elements. If not, print {{Invalid}}.\nIf [[n]] is 0, print {{None}}.",
            "testCases": [
                {
                    "title": "Test 1",
                    "isTest": true,
                    "testIn": "2\n19 28 37 46\n55 64 73 82",
                    "testOut": "19 55\n28 64\n37 73\n46 82",
                    "isValidator": false,
                    "needValidation": true
                },
                {
                    "title": "Validator 1",
                    "isTest": false,
                    "testIn": "2\n1 2 3 4\n5 6 7 8",
                    "testOut": "1 5\n2 6\n3 7\n4 8",
                    "isValidator": true,
                    "needValidation": true
                },
                {
                    "title": "Test 2: Empty",
                    "isTest": true,
                    "testIn": "0",
                    "testOut": "None",
                    "isValidator": false,
                    "needValidation": true
                },
                {
                    "title": "Validator 2",
                    "isTest": false,
                    "testIn": "0",
                    "testOut": "None",
                    "isValidator": true,
                    "needValidation": true
                },
                {
                    "title": "Invalid",
                    "isTest": true,
                    "testIn": "3\n1 2 3 4\n5 6 7 8\n12 7 81",
                    "testOut": "Invalid",
                    "isValidator": false,
                    "needValidation": true
                },
                {
                    "title": "Validator 3: Invalid",
                    "isTest": false,
                    "testIn": "6\n7 7 8 9 7\n1 4 5 6 7\n4 8 7 6 7\n4 4 7\n1 7 5 6 7\n6 6 6 6 6",
                    "testOut": "Invalid",
                    "isValidator": true,
                    "needValidation": true
                },
                {
                    "title": "Test 4",
                    "isTest": true,
                    "testIn": "14\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15",
                    "testOut": "2 3 4 5 6 7 8 9 10 11 12 13 14 15",
                    "isValidator": false,
                    "needValidation": true
                },
                {
                    "title": "Validator 4",
                    "isTest": false,
                    "testIn": "14\n4 2\n5 3\n6 4\n7 5\n8 6\n8 7\n8 8\n8 9\n8 10\n8 11\n8 12\n8 13\n8 14\n8 15",
                    "testOut": "4 5 6 7 8 8 8 8 8 8 8 8 8 8\n2 3 4 5 6 7 8 9 10 11 12 13 14 15",
                    "isValidator": true,
                    "needValidation": true
                }
            ],
            "constraints": "0\u003c\u003d[[n]]\u003c100",
            "stubGenerator": "read N:int\nloop N read EXT:string(1024)\nwrite answer",
            "inputDescription": "\u003c\u003cLine 1\u003e\u003e: An integer [[n]]\n\u003c\u003cNext [[n]] ines\u003e\u003e: [[list_strings]]",
            "solutionLanguage": "Python3",
            "outputDescription": "Transposed [[list_strings]] or {{Invalid}} or {{None}}"
        },
        "draft": false,
        "readyForModeration": true,
        "statementHTML": "\u003cdiv class\u003d\"statement-body\"\u003e\n\u003cdiv class\u003d\"statement-section statement-goal\"\u003e\n   \u003ch2\u003e\u003cspan class\u003d\"icon icon-goal\"\u003e\u0026nbsp;\u003c/span\u003e\u003cspan\u003eGoal \u003c/span\u003e\u003c/h2\u003e\n   \u003cspan class\u003d\"question-statement\"\u003eGiven \u003cvar\u003en\u003c/var\u003e the number of lines, and also \u003cvar\u003elist_strings\u003c/var\u003e of \u003cvar\u003en\u003c/var\u003e lines of elements separated by a space as input. Your task is to print the transposed matrix, with elements in the same line separated by a space.\u003cbr\u003eAll lines must contain the same number of elements. If not, print \u003cconst\u003eInvalid\u003c/const\u003e.\u003cbr\u003eIf \u003cvar\u003en\u003c/var\u003e is 0, print \u003cconst\u003eNone\u003c/const\u003e.\u003c/span\u003e\n\u003c/div\u003e\n\u003cdiv class\u003d\"statement-section statement-protocol\"\u003e\n   \u003cdiv class\u003d\"blk\"\u003e\n      \u003cdiv class\u003d\"title\"\u003eInput\u003c/div\u003e\n      \u003cdiv class\u003d\"question-statement-input\"\u003e\u003cstrong\u003eLine 1\u003c/strong\u003e: An integer \u003cvar\u003en\u003c/var\u003e\u003cbr\u003e\u003cstrong\u003eNext \u003cvar\u003en\u003c/var\u003e ines\u003c/strong\u003e: \u003cvar\u003elist_strings\u003c/var\u003e\u003c/div\u003e\n   \u003c/div\u003e\n   \u003cdiv class\u003d\"blk\"\u003e\n      \u003cdiv class\u003d\"title\"\u003eOutput\u003c/div\u003e\n      \u003cdiv class\u003d\"question-statement-output\"\u003eTransposed \u003cvar\u003elist_strings\u003c/var\u003e or \u003cconst\u003eInvalid\u003c/const\u003e or \u003cconst\u003eNone\u003c/const\u003e\u003c/div\u003e\n   \u003c/div\u003e\n   \u003cdiv class\u003d\"blk\"\u003e\n      \u003cdiv class\u003d\"title\"\u003eConstraints\u003c/div\u003e\n      \u003cdiv class\u003d\"question-statement-constraints\"\u003e0\u0026lt;\u003d\u003cvar\u003en\u003c/var\u003e\u0026lt;100\u003c/div\u003e\n   \u003c/div\u003e\n   \u003cdiv class\u003d\"blk\"\u003e\n      \u003cdiv class\u003d\"title\"\u003eExample\u003c/div\u003e\n      \u003cdiv class\u003d\"statement-inout\"\u003e\n         \u003cdiv class\u003d\"statement-inout-in\"\u003e\n            \u003cdiv class\u003d\"title\"\u003eInput\u003c/div\u003e\n            \u003cpre class\u003d\"question-statement-example-in\"\u003e2\n19 28 37 46\n55 64 73 82\u003c/pre\u003e\n         \u003c/div\u003e\n         \u003cdiv class\u003d\"statement-inout-out\"\u003e\n            \u003cdiv class\u003d\"title\"\u003eOutput\u003c/div\u003e\n            \u003cpre class\u003d\"question-statement-example-out\"\u003e19 55\n28 64\n37 73\n46 82\u003c/pre\u003e\n         \u003c/div\u003e\n      \u003c/div\u003e\n   \u003c/div\u003e\n\u003c/div\u003e"
    },
    "validatedFor": 156049283,
    "commentCount": 8,
    "upVotes": 2,
    "downVotes": 0,
    "validateAction": {
        "actionId": 980348,
        "progress": 1,
        "alreadyDone": false
    },
    "statusHistory": [
        {
            "status": "ACCEPTED",
            "date": 1723115725389,
            "data": {
                "author": "ACTION"
            }
        }
    ],
    "editable": true,
    "draft": false,
    "readyForModeration": true
}